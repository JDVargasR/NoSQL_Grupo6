-- AUTOR: Abraham Cascante Badilla, Jose David Vargas Rodriguez, Lester Matarrita 
-- FECHA: 30-06-2025
-- DESCRIPCIÓN: Script de creación de tablas para el sistema de parqueo

-- TABLA ESTADO
CREATE TABLE FIDE_ESTADO_TB (
    ID_Estado NUMBER CONSTRAINT FIDE_ESTADO_ID_PK PRIMARY KEY,
    Tipo_Estado VARCHAR2(30)
);

-- TIPO DE USUARIO
CREATE TABLE FIDE_TIPO_USUARIO_TB (
    ID_Tipo_Usuario NUMBER CONSTRAINT FIDE_TIPO_USUARIO_ID_PK PRIMARY KEY,
    Tipo_Rol VARCHAR2(30),
    ID_Estado NUMBER CONSTRAINT FIDE_TIPO_USUARIO_ESTADO_FK REFERENCES FIDE_ESTADO_TB(ID_Estado)
);

-- USUARIO
CREATE TABLE FIDE_USUARIO_TB (
    ID_Usuario NUMBER CONSTRAINT FIDE_USUARIO_ID_PK PRIMARY KEY,
    ID_Estado NUMBER,
    ID_Tipo_Usuario NUMBER,
    Nombre VARCHAR2(50),
    Correo VARCHAR2(100),
    Contrasenna VARCHAR2(100),
    CONSTRAINT FIDE_USUARIO_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado),
    CONSTRAINT FIDE_USUARIO_TIPO_USUARIO_FK FOREIGN KEY (ID_Tipo_Usuario) REFERENCES FIDE_TIPO_USUARIO_TB(ID_Tipo_Usuario)
);

-- TIPO VEHICULO
CREATE TABLE FIDE_TIPO_VEHICULO_TB (
    ID_Tipo_Vehiculo NUMBER CONSTRAINT FIDE_TIPO_VEHICULO_ID_PK PRIMARY KEY,
    ID_Estado NUMBER,
    Tipo VARCHAR2(50),
    CONSTRAINT FIDE_TIPO_VEHICULO_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado)
);

-- MODELO
CREATE TABLE FIDE_MODELO_TB (
    ID_Modelo NUMBER CONSTRAINT FIDE_MODELO_ID_PK PRIMARY KEY,
    ID_Estado NUMBER,
    Modelo VARCHAR2(50),
    Anio NUMBER,
    CONSTRAINT FIDE_MODELO_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado)
);

-- PLACA
CREATE TABLE FIDE_PLACA_TB (
    ID_Placa NUMBER CONSTRAINT FIDE_PLACA_ID_PK PRIMARY KEY,
    ID_Estado NUMBER,
    Numero_Placa VARCHAR2(20),
    CONSTRAINT FIDE_PLACA_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado)
);

-- VEHICULO
CREATE TABLE FIDE_VEHICULO_TB (
    ID_Vehiculo NUMBER CONSTRAINT FIDE_VEHICULO_ID_PK PRIMARY KEY,
    ID_Estado NUMBER,
    ID_Tipo_Vehiculo NUMBER,
    ID_Modelo NUMBER,
    ID_Placa NUMBER,
    ID_Usuario NUMBER,
    CONSTRAINT FIDE_VEHICULO_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado),
    CONSTRAINT FIDE_VEHICULO_TIPO_VEHICULO_FK FOREIGN KEY (ID_Tipo_Vehiculo) REFERENCES FIDE_TIPO_VEHICULO_TB(ID_Tipo_Vehiculo),
    CONSTRAINT FIDE_VEHICULO_MODELO_FK FOREIGN KEY (ID_Modelo) REFERENCES FIDE_MODELO_TB(ID_Modelo),
    CONSTRAINT FIDE_VEHICULO_PLACA_FK FOREIGN KEY (ID_Placa) REFERENCES FIDE_PLACA_TB(ID_Placa),
    CONSTRAINT FIDE_VEHICULO_USUARIO_FK FOREIGN KEY (ID_Usuario) REFERENCES FIDE_USUARIO_TB(ID_Usuario)
);

-- ESPACIO
CREATE TABLE FIDE_ESPACIO_TB (
    ID_Espacio NUMBER CONSTRAINT FIDE_ESPACIO_ID_PK PRIMARY KEY,
    ID_Vehiculo NUMBER,
    ID_Estado NUMBER,
    Cantidad_Horas NUMBER,
    CONSTRAINT FIDE_ESPACIO_VEHICULO_FK FOREIGN KEY (ID_Vehiculo) REFERENCES FIDE_VEHICULO_TB(ID_Vehiculo),
    CONSTRAINT FIDE_ESPACIO_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado)
);

-- TARIFA
CREATE TABLE FIDE_TARIFA_TB (
    ID_Tarifa NUMBER CONSTRAINT FIDE_TARIFA_ID_PK PRIMARY KEY,
    ID_Espacio NUMBER,
    Costo_Hora NUMBER,
    CONSTRAINT FIDE_TARIFA_ESPACIO_FK FOREIGN KEY (ID_Espacio) REFERENCES FIDE_ESPACIO_TB(ID_Espacio)
);

-- DESCUENTO
CREATE TABLE FIDE_DESCUENTO_TB (
    ID_Descuento NUMBER CONSTRAINT FIDE_DESCUENTO_ID_PK PRIMARY KEY,
    ID_Estado NUMBER,
    Cantidad_Descuento NUMBER,
    CONSTRAINT FIDE_DESCUENTO_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado)
);

-- MÉTODO PAGO
CREATE TABLE FIDE_METODO_PAGO_TB (
    ID_Metodo_Pago NUMBER CONSTRAINT FIDE_METODO_PAGO_ID_PK PRIMARY KEY,
    ID_Estado NUMBER,
    Tipo_Metodo_Pago VARCHAR2(50),
    CONSTRAINT FIDE_METODO_PAGO_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado)
);

-- PAGO
CREATE TABLE FIDE_PAGO_TB (
    ID_Pago NUMBER CONSTRAINT FIDE_PAGO_ID_PK PRIMARY KEY,
    Monto_Pago NUMBER,
    ID_Metodo_Pago NUMBER,
    ID_Estado NUMBER,
    ID_Descuento NUMBER,
    CONSTRAINT FIDE_PAGO_METODO_FK FOREIGN KEY (ID_Metodo_Pago) REFERENCES FIDE_METODO_PAGO_TB(ID_Metodo_Pago),
    CONSTRAINT FIDE_PAGO_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado),
    CONSTRAINT FIDE_PAGO_DESCUENTO_FK FOREIGN KEY (ID_Descuento) REFERENCES FIDE_DESCUENTO_TB(ID_Descuento)
);

-- FACTURA
CREATE TABLE FIDE_FACTURA_TB (
    ID_Factura NUMBER CONSTRAINT FIDE_FACTURA_ID_PK PRIMARY KEY,
    ID_Tarifa NUMBER,
    ID_Espacio NUMBER,
    ID_Usuario NUMBER,
    ID_Pago NUMBER,
    Monto_Total NUMBER,
    CONSTRAINT FIDE_FACTURA_TARIFA_FK FOREIGN KEY (ID_Tarifa) REFERENCES FIDE_TARIFA_TB(ID_Tarifa),
    CONSTRAINT FIDE_FACTURA_ESPACIO_FK FOREIGN KEY (ID_Espacio) REFERENCES FIDE_ESPACIO_TB(ID_Espacio),
    CONSTRAINT FIDE_FACTURA_USUARIO_FK FOREIGN KEY (ID_Usuario) REFERENCES FIDE_USUARIO_TB(ID_Usuario),
    CONSTRAINT FIDE_FACTURA_PAGO_FK FOREIGN KEY (ID_Pago) REFERENCES FIDE_PAGO_TB(ID_Pago)
);

-- NOTAS
CREATE TABLE FIDE_NOTAS_TB (
    ID_Notas NUMBER CONSTRAINT FIDE_NOTAS_ID_PK PRIMARY KEY,
    ID_Estado NUMBER,
    Anotaciones VARCHAR2(300),
    CONSTRAINT FIDE_NOTAS_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado)
);

-- RESERVAS
CREATE TABLE FIDE_RESERVAS_TB (
    ID_Reserva NUMBER CONSTRAINT FIDE_RESERVAS_ID_PK PRIMARY KEY,
    ID_Usuario NUMBER,
    ID_Espacio NUMBER,
    ID_Estado NUMBER,
    Monto_Total NUMBER,
    CONSTRAINT FIDE_RESERVA_USUARIO_FK FOREIGN KEY (ID_Usuario) REFERENCES FIDE_USUARIO_TB(ID_Usuario),
    CONSTRAINT FIDE_RESERVA_ESPACIO_FK FOREIGN KEY (ID_Espacio) REFERENCES FIDE_ESPACIO_TB(ID_Espacio),
    CONSTRAINT FIDE_RESERVA_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado)
);

-- REPORTE MENSUAL
CREATE TABLE FIDE_REPORTE_MENSUAL_TB (
    ID_Reporte_Mensual NUMBER CONSTRAINT FIDE_REPORTE_MENSUAL_ID_PK PRIMARY KEY,
    ID_Estado NUMBER,
    Fecha DATE,
    CONSTRAINT FIDE_REPORTE_MENSUAL_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado)
);

-- REPORTES
CREATE TABLE FIDE_REPORTES_TB (
    ID_Reporte NUMBER CONSTRAINT FIDE_REPORTES_ID_PK PRIMARY KEY,
    ID_Reporte_Mensual NUMBER,
    ID_Estado NUMBER,
    Fecha DATE,
    CONSTRAINT FIDE_REPORTES_REP_MENSUAL_FK FOREIGN KEY (ID_Reporte_Mensual) REFERENCES FIDE_REPORTE_MENSUAL_TB(ID_Reporte_Mensual),
    CONSTRAINT FIDE_REPORTES_ESTADO_FK FOREIGN KEY (ID_Estado) REFERENCES FIDE_ESTADO_TB(ID_Estado)
);

--INSETAR ACTIVO O INACTIVO
INSERT INTO FIDE_ESTADO_TB (ID_Estado, Tipo_Estado) VALUES (1, 'Activo');
INSERT INTO FIDE_ESTADO_TB (ID_Estado, Tipo_Estado) VALUES (2, 'Inactivo');

-- INSERTAR ROLES 
INSERT INTO FIDE_TIPO_USUARIO_TB (ID_Tipo_Usuario, Tipo_Rol, ID_Estado) VALUES (1, 'Cliente', 1);
INSERT INTO FIDE_TIPO_USUARIO_TB (ID_Tipo_Usuario, Tipo_Rol, ID_Estado) VALUES (2, 'Administrador', 1);
---------------------------------------------------------------------------------

--INCREMENTACION DE ID / NO SE USA ACTUALMENTE / NO CORRER
CREATE SEQUENCE FIDE_USUARIO_SEQ START WITH 1 
INCREMENT BY 1 NOCACHE;

-----------------------------------
--TRIGGER PARA INSETAR ID'S AUTOMATICAMENTE / NO SE USA ACTUALMENTE / NO CORRER
CREATE OR REPLACE TRIGGER TRG_FIDE_USUARIO
BEFORE INSERT ON FIDE_USUARIO_TB
FOR EACH ROW
BEGIN
   :NEW.ID_Usuario := FIDE_USUARIO_SEQ.NEXTVAL;
END;

---PROCEDIMIENTO - 1.0

----INCREMENTACION DE ID POR MEDIO DE SEQUENCE
CREATE SEQUENCE INC_USUARIO_ID START WITH 1 INCREMENT BY 1;

--PROCEDIMIENTO DE REGISTRO
CREATE OR REPLACE PROCEDURE SP_REGISTRAR_USUARIO(
    p_nombre       IN VARCHAR2,
    p_correo       IN VARCHAR2,
    p_contrasenna  IN VARCHAR2,
    p_resultado    OUT VARCHAR2
) AS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM FIDE_USUARIO_TB
    WHERE correo = p_correo;

    IF v_count > 0 THEN
        p_resultado := 'CORREO_EXISTENTE';
    ELSE
        INSERT INTO FIDE_USUARIO_TB (
            ID_USUARIO,
            ID_Estado,
            ID_Tipo_Usuario,
            Nombre,
            Correo,
            Contrasenna
        ) VALUES (
            INC_USUARIO_ID.NEXTVAL,  -- Autoincremento
            1,                       -- Estado Activo
            1,                       -- Rol Cliente
            p_nombre,
            p_correo,
            p_contrasenna
        );

        p_resultado := 'REGISTRO_EXITOSO';
    END IF;
END;

/

--PROCEDIMIENTO PARA EL LOGIN
CREATE OR REPLACE PROCEDURE SP_VERIFICAR_LOGIN(
    p_correo       IN VARCHAR2,
    p_contrasenna  IN VARCHAR2,
    p_resultado    OUT VARCHAR2
) AS
    v_contrasenna FIDE_USUARIO_TB.Contrasenna%TYPE;
BEGIN
    SELECT Contrasenna INTO v_contrasenna
    FROM FIDE_USUARIO_TB
    WHERE Correo = p_correo;

    IF v_contrasenna = p_contrasenna THEN
        p_resultado := 'LOGIN EXITOSO';
    ELSE
        p_resultado := 'CONTRASEÑA INCORRECTA';
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_resultado := 'CORREO NO ENCONTRADO';
END;

/
